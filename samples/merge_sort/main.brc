@import io

@extern rand fun -> u64
@extern srand fun: seed u64
@extern time fun: second u64 -> u64

merge fun: numbers data<u64, 32>, low u64, mid u64, high u64 -> data<u64, 32>
    temp data<u64, 32> <- numbers
    iTemp u64 <- low
    iLeft u64 <- low
    iRight u64 <- mid
    
    rep iLeft < mid and iRight < high, iTemp <- iTemp + 1
        if numbers[iLeft] < numbers[iRight]
            temp[iTemp] <- numbers[iLeft]
            iLeft <- iLeft + 1
        else
            temp[iTemp] <- numbers[iRight]
            iRight <- iRight + 1
        ;
    ;

    rep iLeft < mid, iLeft <- iLeft + 1
        temp[iTemp] <- numbers[iLeft]
        iTemp <- iTemp + 1
    ;

    rep iRight < high, iRight <- iRight + 1
        temp[iTemp] <- numbers[iRight]
        iTemp <- iTemp + 1
    ;

    ret temp
;

mergeSort fun: numbers data<u64, 32>, low u64, high u64 -> data<u64, 32>
    if low < high-1
        mid u64 <- low + (high - low) / 2
        numbers <- mergeSort(numbers, low, mid)
        numbers <- mergeSort(numbers, mid, high)
        numbers <- merge(numbers, low, mid, high)
    ;

    ret numbers
;

@export main fun -> u64
    srand(time(0))

    // generate random numbers
    @io.print("Before")
    numbers data<u64, 32>
    rep i u64 <- 0, i < 32, i <- i + 1
        num u64 <- rand() % 10_000
        numbers[i] <- num
        @io.printNum(num)
        @io.printChar('\n')
    ;

    numbers <- mergeSort(numbers, 0, 32)
    @io.printChar('\n')

    // print out result
    @io.print("After\n")
    rep i u64 <- 0, i <32, i <- i + 1
        @io.printNum(numbers[i])
        @io.printChar('\n')
    ;

    ret 0
;