@module mem

@extern terminal_print_character fun
printChar raw<"m, ~{eax}">: character u32
    mov al, 7
    mov ah, $0
    call terminal_print_character
;

@extern terminal_print_hex fun
printHexRaw raw<"m, m">: number u32, attribute u32
    mov ebx, $0
    mov eax, $1
    call terminal_print_hex
;

printHexRaw8 raw<"m, m">: number u8, attribute u32
    mov ebx, 0
    mov bl, $0
    mov eax, $1
    call terminal_print_hex
;


@export heap u32

Layout blob
    memSize u32
    pageSize u32
    pagesCount u32
    //memPages ptr<u8>
    memPages data<u8>
    //memPages u8
;
pMemLayout ptr<blob<Layout>>

@export init fun
    pMemLayout <- { heap.adr }
    pMemLayout.val.memPages <- { pMemLayout.val.pagesCount.adr + 4 }

    //printHexRaw(pMemLayout.val.memSize, 1)
    printChar('\n')
    //printHexRaw(pMemLayout.val.pageSize, 1)
    //printChar('\n')
    //printHexRaw(pMemLayout.val.pagesCount, 1)
    //printChar('\n')

    /*rep i u32 <- 0, i < 8, i <- i + 1
        //memPage ptr<u8> <- { pMemLayout.val.memPages.vAdr + i }
        //v u32 <- memPage.val
        //printHexRaw8(pMemLayout.val.memPages[i], 7)
        //printChar(' ')
    ;*/

    
    //i <- i + 1
    rep i u32 <- 0, i < 8, i <- i + 1
    ;

    /*printHexRaw8(pMemLayout.val.memPages[0], 7)
    printChar(' ')
    printHexRaw8(pMemLayout.val.memPages[1], 7)
    printChar(' ')
    printHexRaw8(pMemLayout.val.memPages[2], 7)
    printChar(' ')*/


    //dummy u32 <- 0
    //rep: dummy <- dummy + 1
;
