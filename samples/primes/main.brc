@extern putchar fun: character u64 -> u32
@extern malloc fun: size u64 -> ptr<u8>

@export printNum fun: number u64
    biggest u64 <- 10
    rep biggest <= number: biggest <- biggest * 10
    biggest <- biggest / 10

    rep biggest > 0, biggest <- biggest / 10
        digit u64 <- number / biggest
        putchar(digit + '0')
        number <- number % biggest
    ;
;

primesCount u64 <- 0
pPrimes ptr<data<u64>>

findPrimes fun: n u64
    pPrimeFlags ptr<data<bool>> <- malloc(bool.size * n)

    rep i u64 <- 0, i < n, i <- i + 1
        pPrimeFlags.val[i] <- if i < 2: false else: true
    ;

    rep p u64 <- 2, p * p < n, p <- p + 1
        if pPrimeFlags.val[p] = true
            rep i u64 <- p * p, i < n, i <- i + p
                pPrimeFlags.val[i] <- false
            ;
        ;
    ;

    rep i u64 <- 0, i < n, i <- i + 1
        if pPrimeFlags.val[i] = true
            pPrimes.val[primesCount] <- i
            primesCount <- primesCount + 1
        ;
    ;
;

@export main fun -> u64
    n u64 <- 100_000_000
    pPrimes <- malloc(u64.size * n)
    findPrimes(n)

    /*rep i u64 <- 0, i < primesCount, i <- i + 1
        printNum(pPrimes.val[i])
        putchar('\n')
    ;*/
    printNum(primesCount)
    putchar('\n')

    ret 0
;