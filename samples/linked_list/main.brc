@import io

@extern malloc fun: size u64 -> u64

user blob
    name data<u64, 16>
    id u64
    next ptr<blob<user>>
;

newUser fun: userPtrPtr ptr<ptr<blob<user>>>, name data<u64, 16>, id u64
    newUserPtr ptr<blob<user>> <- { malloc(130) }
    newUserPtr.val <- { name, id, { 0x00 } }

    if userPtrPtr.val.vAdr = 0x00
        userPtrPtr.val <- newUserPtr
    else
        userPtr ptr<blob<user>> <- userPtrPtr.val
        rep userPtr.val.next.vAdr != 0x00
            userPtr <- userPtr.val.next
        ;
        userPtr.val.next <- newUserPtr
    ;
;

printUsers fun: userPtr ptr<blob<user>>
    rep userPtr.vAdr != 0x00, userPtr <- userPtr.val.next
        @io.print("id: ")
        @io.printNum(userPtr.val.id)
        @io.print("\n")
        @io.print("name: ")
        @io.print(userPtr.val.name)
        @io.print("\n")
    ;
;

@export main fun -> u32
    userPtr ptr<blob<user>> <- { 0x00 }
    newUser( { userPtr.adr }, "Bob", 14)
    newUser( { userPtr.adr }, "John", 7)
    newUser( { userPtr.adr }, "Alice", 9)
    newUser( { userPtr.adr }, "Mike", 3)
    newUser( { userPtr.adr }, "Kuma", 666)

    printUsers(userPtr)

    ret 0
;